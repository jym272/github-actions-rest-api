name: Test rest api
on:
  push:
    branches:
      - master
#    paths:
#      - 'project/**'
defaults:
  run:
    shell: bash
    working-directory: project
jobs:
  build-api:
    runs-on: ubuntu-latest
    outputs:
      size: ${{ steps.build.outputs.SIZE }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Get npm cache directory
        id: npm-cache-dir
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
      - name: Cache dependencies
        uses: actions/cache@v3
        id: npm-cache
        with:
          path: |
            ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - if: ${{ steps.npm-cache.outputs.cache-hit != 'true' }}
        name: Not an exact match is found for a cache for the specified key
        continue-on-error: true
        run: npm list
      - name: Install an Build
        id: build
        run: |
          npm ci
          npm run lint
          npm run build
          cp -rf ../.git/ dist/
          touch dist/.nojekyll
          echo "SIZE=$(du -sh dist | awk '{print $1}')" >> $GITHUB_OUTPUT
      - name: Upload Artifact - Build dist folder
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: project/dist
  test-api-containerized:
    needs: build-api
    runs-on: ubuntu-latest
    container:
      image: node:19
    environment: testing
    env:
      MONGO_INITDB_USERNAME: jorge
      MONGO_INITDB_PASSWORD: 123456
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      # if the host is not containerized use in MONGO_CLUSTER: 127.0.0.1:27017
      MONGO_CLUSTER: mongodb-service
      PORT: 3391
      MONGO_INITDB_DATABASE: rest-api-test-containerized
      MONGO_CONNECTION_PROTOCOL: mongodb
    services:
      mongodb-service:
        image: mongo:latest
        # if the host is not containerized use:
#        ports:
#          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: jorge
          MONGO_INITDB_ROOT_PASSWORD: 123456
    outputs:
      tests-failed: ${{ steps.failure.outputs.TESTS_FAILED }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install Netcat in container
        run: apt-get update && apt-get install -y netcat
      - name: Find all package-lock.json
        run: find . -name package-lock.json
      - name: Get npm cache directory
        id: npm-cache-dir
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
      - name: Cache dependencies
        uses: actions/cache@v3
        id: npm-cache
        with:
          path: |
            ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - if: ${{ steps.npm-cache.outputs.cache-hit != 'true' }}
        name: Not an exact match is found for a cache for the specified key
        continue-on-error: true
        run: npm list
      - name: Download artifact - Build dist folder
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: project/dist
      - name: Install and Run Tests
        id: running-tests
        run: |
          npm ci
          bash scripts/test
      - name: Upload report if tests fail
        if: ${{ failure() && steps.running-tests.outcome == 'failure' }}
        uses: actions/upload-artifact@v3
        with:
          name: report-containerized
          path: project/playwright-report
      - name: Set Output if tests fail
        id: failure
        if: ${{ failure() && steps.running-tests.outcome == 'failure' }}
        run: |
          echo "TESTS_FAILED=true" >> $GITHUB_OUTPUT
  test-api:
    needs: build-api
    runs-on: ubuntu-latest
    environment: testing
    env:
      MONGO_INITDB_USERNAME: ${{ secrets.MONGO_INITDB_USERNAME }}
      MONGO_INITDB_PASSWORD: ${{ secrets.MONGO_INITDB_PASSWORD }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      MONGO_CLUSTER: cluster0.hhxxk.mongodb.net
      PORT: 3191
      MONGO_INITDB_DATABASE: rest-api-test
      MONGO_CONNECTION_PROTOCOL: mongodb+srv
    outputs:
      tests-failed: ${{ steps.failure.outputs.TESTS_FAILED }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Get npm cache directory
        id: npm-cache-dir
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
      - name: Cache dependencies
        uses: actions/cache@v3
        id: npm-cache
        with:
          path: |
            ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - if: ${{ steps.npm-cache.outputs.cache-hit != 'true' }}
        name: Not an exact match is found for a cache for the specified key
        continue-on-error: true
        run: npm list
      - name: Download artifact - Build dist folder
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: project/dist
      - name: Install and Run Tests
        id: running-tests
        run: |
          npm ci
          bash scripts/test
      - name: Upload report if tests fail
        if: ${{ failure() && steps.running-tests.outcome == 'failure' }}
        uses: actions/upload-artifact@v3
        with:
          name: report
          path: project/playwright-report
      - name: Set Output if tests fail
        id: failure
        if: ${{ failure() && steps.running-tests.outcome == 'failure' }}
        run: |
          echo "TESTS_FAILED=true" >> $GITHUB_OUTPUT
  report:
    needs: [test-api, test-api-containerized]
    if: ${{ failure() && (needs.test-api.outputs.tests-failed == 'true' || needs.test-api-containerized.outputs.tests-failed == 'true') }}
    runs-on: ubuntu-latest
    steps:
      - if: ${{ needs.test-api.outputs.tests-failed == 'true' }}
        name: Download report
        uses: actions/download-artifact@v3
        with:
          name: report
          path: project/playwright-report
      - if: ${{ needs.test-api.outputs.tests-failed == 'true' }}
        name: Show report
        run: |
          ls -la 
          ls -la playwright-report
          cat playwright-report/test-results.json | jq
      - if: ${{ needs.test-api-containerized.outputs.tests-failed == 'true' }}
        name: Download report containerized
        uses: actions/download-artifact@v3
        with:
          name: report-containerized
          path: project/playwright-report-containerized
      - if: ${{ needs.test-api-containerized.outputs.tests-failed == 'true' }}
        name: Show report containerized
        run: |
          ls -la 
          ls -la playwright-report-containerized
          cat playwright-report-containerized/test-results.json | jq
  deploy:
    needs: [test-api, test-api-containerized]
    uses: ./.github/workflows/deploy-reusable.yml
    with:
      artifact-name: dist
  print-size:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Print size
        working-directory: .
        run: |
          pwd
          echo ${{ needs.deploy.outputs.size }}


#  deploy-frontend:
#    needs: build-frontend
#    runs-on: ubuntu-latest
#    steps:
#      - name: Download Artifact
#        uses: actions/download-artifact@v3
#        with:
#          name: frontend
#      - name: Output from build
#        run: |
#          printf 'Out Size in Build Step:\n%s\n' "${{ needs.build-frontend.outputs.size }}"
#          printf 'Out Size in Download Artifact Files:\n%s\n' "$(du -sh . | awk '{print $1}')"
#      - name: Deploy
#        uses: JamesIves/github-pages-deploy-action@releases/v4
#        with:
#          BRANCH: gh-pages
#          FOLDER: .
#          CLEAN: true
