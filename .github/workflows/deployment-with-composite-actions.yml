name: Test rest api with composite custom actions
on:
  push:
    branches:
      - master
    paths:
      - 'project/**'
defaults:
  run:
    shell: bash
    working-directory: project
jobs:
  build-api-for-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Load cached dependencies and run commands
        uses: ./.github/actions/cache-deps
        with:
          working-directory: project
          run-commands: |
            npm ci --production
            npm run build
            cp -rf ../.git/ dist/
            touch dist/.nojekyll
      - name: Upload Artifact - Build dist folder
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: project/dist
  test-api-containerized:
    needs: build-api-for-test
    runs-on: ubuntu-latest
    container:
      image: node:19
    environment: testing
    env:
      MONGO_INITDB_USERNAME: jorge
      MONGO_INITDB_PASSWORD: 123456
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      # if the host is not containerized use in MONGO_CLUSTER: 127.0.0.1:27017
      MONGO_CLUSTER: mongodb-service
      PORT: 3391
      MONGO_INITDB_DATABASE: rest-api-test-containerized
      MONGO_CONNECTION_PROTOCOL: mongodb
    services:
      mongodb-service:
        image: mongo:latest
        # if the host is not containerized use:
        #        ports:
        #          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: jorge
          MONGO_INITDB_ROOT_PASSWORD: 123456
    outputs:
      tests-failed: ${{ steps.running-tests.outputs.tests-failed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install Netcat in container
        run: apt-get update && apt-get install -y netcat
      - name: Download artifact - Build dist folder
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: project/dist
      - name: Load cached dependencies and run commands
        uses: ./.github/actions/cache-deps
        id: running-tests
        with:
          running-test: true
          report-name: report-containerized
          working-directory: project
          run-commands: |
            npm ci --production
            bash scripts/test
  test-api:
    needs: build-api-for-test
    runs-on: ubuntu-latest
    environment: testing
    env:
      MONGO_INITDB_USERNAME: ${{ secrets.MONGO_INITDB_USERNAME }}
      MONGO_INITDB_PASSWORD: ${{ secrets.MONGO_INITDB_PASSWORD }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      MONGO_CLUSTER: cluster0.hhxxk.mongodb.net
      PORT: 3191
      MONGO_INITDB_DATABASE: rest-api-test
      MONGO_CONNECTION_PROTOCOL: mongodb+srv
    outputs:
      tests-failed: ${{ steps.running-tests.outputs.tests-failed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download artifact - Build dist folder
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: project/dist
      - name: Load cached dependencies and run commands
        uses: ./.github/actions/cache-deps
        id: running-tests
        with:
          running-test: true
          report-name: report
          working-directory: project
          run-commands: |
            npm ci --production
            bash scripts/test
  report:
    needs: [test-api, test-api-containerized]
    if: ${{ failure() && (needs.test-api.outputs.tests-failed == 'true' || needs.test-api-containerized.outputs.tests-failed == 'true') }}
    runs-on: ubuntu-latest
    steps:
      - if: ${{ needs.test-api.outputs.tests-failed == 'true' }}
        name: Download report
        uses: actions/download-artifact@v3
        with:
          name: report
          path: project/playwright-report
      - if: ${{ needs.test-api.outputs.tests-failed == 'true' }}
        name: Show report
        run: |
          ls -la 
          ls -la playwright-report
          cat playwright-report/test-results.json | jq
      - if: ${{ needs.test-api-containerized.outputs.tests-failed == 'true' }}
        name: Download report containerized
        uses: actions/download-artifact@v3
        with:
          name: report-containerized
          path: project/playwright-report-containerized
      - if: ${{ needs.test-api-containerized.outputs.tests-failed == 'true' }}
        name: Show report containerized
        run: |
          ls -la 
          ls -la playwright-report-containerized
          cat playwright-report-containerized/test-results.json | jq
  deploy:
    needs: [test-api, test-api-containerized]
    uses: ./.github/workflows/deploy-reusable.yml
    with:
      artifact-name: dist
  print-size:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Print size
        working-directory: .
        run: |
          pwd
          echo ${{ needs.deploy.outputs.size }}
