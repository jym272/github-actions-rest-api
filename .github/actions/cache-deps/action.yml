# for detailed info go to: https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions
name: Cache Dependencies & run commands
description: Get the dependencies via npm, cache them and run npm commands related.
inputs:
  working-directory:
    description: 'Working directory for commands'
    required: false
    default: .
  run-commands:
    description: "Bash shell commands"
    required: false
    default: |
      echo 'Please provide commands to run'
  running-test:
    description: "Specifies whether the given commands run tests"
    required: false
    default: 'false'
  report-name:
    description: "Report name if commands fails"
    required: false
    default: report
outputs:
  tests-failed:
      description: "Specifies whether the given commands failed"
      value: ${{ steps.failure-test.outputs.TESTS_FAILED }}

runs:
  using: composite
  steps:
    - name: Get npm cache directory
      id: npm-cache-dir
      run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
      shell: bash
    - name: Cache dependencies
      uses: actions/cache@v3
      id: npm-cache
      with:
        path: |
          ${{ steps.npm-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    - if: ${{ steps.npm-cache.outputs.cache-hit != 'true' }}
      name: Not an exact match is found for a cache for the specified key
      continue-on-error: true
      shell: bash
      run: npm list
    - name: Running commands
      id: running-commands
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        ${{ inputs.run-commands }}
    - name: Upload report if tests fail
      if: ${{ failure() && steps.running-commands.outcome == 'failure' && inputs.running-test == 'true' }}
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.report-name }}
        path: project/playwright-report
    - name: Set Output if tests fail
      id: failure-test
      shell: bash
      if: ${{ failure() && steps.running-commands.outcome == 'failure' && inputs.running-test == 'true' }}
      run: |
        echo "TESTS_FAILED=true" >> $GITHUB_OUTPUT
